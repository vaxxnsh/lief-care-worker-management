### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Attendance {
  clockInAt: DateTime!
  clockInLat: Float!
  clockInLng: Float!
  clockOutAt: DateTime
  clockOutLat: Float
  clockOutLng: Float
  date: DateTime!
  id: String!
  status: AttendanceStatus!
  user: User!
}

enum AttendanceStatus {
  ABSENT
  CHECKED_OUT
  PRESENT
}

scalar DateTime

type Location {
  address: String
  id: String!
  latitude: Float!
  longitude: Float!
  name: String!
  organizationId: String!
  radiusMeters: Int!
  shiftEnd: DateTime!
  shiftStart: DateTime!
}

type Mutation {
  addLocationToOrg(address: String!, lat: Float!, long: Float!, name: String!, orgId: String!, radius: Int!, shiftEnd: String!, shiftStart: String!): Location!
  addMemberToOrg(memberId: String!, orgId: String!, role: Int!): Boolean!
  changeMemberRole(memberId: String!, orgId: String!, role: Int!): Boolean!
  clockInToOrg(lat: Float!, long: Float!, orgId: String!): Boolean!
  clockOutOfOrg(lat: Float!, long: Float!, orgId: String!): Boolean!
  createOrg(name: String!): Organization!
  removeLocationFromOrg(locationId: String!, orgId: String!): Boolean!
  removeMemberFromOrg(memberId: String!, orgId: String!): Boolean!
}

type OrgMembers {
  id: String!
  orgId: String!
  role: String!
  userId: String!
}

type Organization {
  id: String
  name: String
}

type Query {
  GetOrgLocations(orgId: String!): [Location]
  GetOrgs: [Organization]
  getClockInEmployees(orgId: String!): [Attendance!]!
}

type User {
  email: String!
  emailVerified: Boolean
  id: String!
  image: String
  name: String
}